{"version":3,"sources":["account-check.js"],"names":["LunaUserAccountChecker","el","options","u","defaultsDeep","constructor","defaultOptions","dataset","customErrorMessage","__","validate","validate_name","form","closest","registerEvents","setTimeout","registerHandler","account","trigger","$http","get","route","field","value","then","res","exists","data","xhr","console","error","addEventListener","e","check","accountExists","setCustomValidity","log","validationMessage","fv","module","checkValidity","$validation","getValidation","addValidator","element","r","Unicorn","mix","EventMixin","directive","mounted","JSON","parse","getBoundedInstance"],"mappings":"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","sourcesContent":["/**\n * Part of earth project.\n *\n * @copyright  Copyright (C) 2022 __ORGANIZATION__.\n * @license    __LICENSE__\n */\n\nimport '@main';\n\nclass LunaUserAccountChecker extends Unicorn.mix(class {}).with(Unicorn.EventMixin) {\n  static defaultOptions = {\n    field: null,\n    validate_name: 'user-account'\n  };\n\n  constructor(el, options = {}) {\n    super();\n\n    this.el = el;\n    this.options = u.defaultsDeep(options, this.constructor.defaultOptions);\n\n    if (!this.el.dataset.customErrorMessage) {\n      this.el.dataset.customErrorMessage = u.__('luna.message.user.account.exists');\n    }\n\n    this.el.dataset.validate = this.el.dataset.validate + '|' + this.options.validate_name;\n    this.form = this.el.closest('form');\n\n    this.registerEvents();\n\n    setTimeout(() => {\n      this.registerHandler();\n    }, 300);\n  }\n\n  check(account) {\n    this.trigger('start', { account });\n\n    return u.$http.get(u.route('@account_check', { field: this.options.field, value: account }))\n      .then((res) => {\n        this.trigger('done', { account, exists: res.data.exists, res });\n\n        return res.data.data.exists;\n      })\n      .catch((xhr) => {\n        console.error(xhr);\n        this.trigger('error', { account, xhr });\n      })\n      .finally(() => {\n        this.trigger('end', { account });\n      });\n  }\n\n  registerEvents() {\n    this.el.addEventListener('change', (e) => {\n      this.check(this.el.value)\n        .then((exists) => {\n          this.el.dataset.accountExists = exists;\n\n          if (!exists) {\n            this.el.setCustomValidity(u.__('luna.message.user.account.exists'));\n            console.log(this.el.validationMessage);\n          } else {\n            this.el.setCustomValidity('');\n          }\n\n          let fv = u.module(this.el, 'field.validation');\n\n          if (!fv) {\n            fv = u.module(this.el.closest('[uni-field-validate]'), 'field.validation');\n          }\n\n          fv.checkValidity();\n        });\n    });\n  }\n\n  getValidation() {\n    return u.$validation.get(this.form);\n  }\n\n  registerHandler() {\n    this.getValidation().addValidator(this.options.validate_name, (value, element) => {\n      const r = element.dataset.accountExists === 'false';\n\n      if (!r) {\n        element.setCustomValidity(u.__('luna.message.user.account.exists'));\n      }\n\n      return r;\n    });\n  }\n}\n\nu.directive('account-check', {\n  mounted(el, { value }) {\n    const options = JSON.parse(value || '{}');\n\n    u.getBoundedInstance(el, 'account.check', (el) => new LunaUserAccountChecker(el, options));\n  }\n});\n"],"file":"account-check.js"}