{"version":3,"sources":["srp/registration.ts"],"names":[],"mappings":"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","file":"registration.js","sourcesContent":["\nimport '@main';\nimport type { SRPOptions } from '../../types/srp';\n\nconst defaultOptions: Partial<SRPOptions> = {\n  identitySelector: '[data-input-identity]',\n  passwordSelector: '[data-input-password]',\n  size: 256,\n};\n\nclass SRPRegistration {\n  identityInput: HTMLInputElement;\n  passwordInput: HTMLInputElement;\n  saltInput: HTMLInputElement;\n  verifierInput: HTMLInputElement;\n\n  public submitting = false;\n\n  constructor(public el: HTMLFormElement, public options: Partial<SRPOptions> = {}) {\n    this.options = Object.assign({}, defaultOptions, this.options);\n\n    this.init();\n  }\n\n  init() {\n    this.identityInput = this.el.querySelector(this.options.identitySelector);\n    this.passwordInput = this.el.querySelector(this.options.passwordSelector);\n\n    if (!this.identityInput || !this.passwordInput) {\n      throw new Error('Identity or password input not found.');\n    }\n\n    this.el.addEventListener('submit', async (e) => {\n      if (!this.submitting) {\n        e.stopPropagation();\n        e.preventDefault();\n        e.stopImmediatePropagation();\n\n        await this.register();\n\n        this.disablePasswords();\n\n        this.submitting = true;\n\n        this.el.requestSubmit();\n\n        return;\n      }\n    });\n\n    this.el.addEventListener('invalid', () => {\n      this.submitting = false;\n    }, true);\n  }\n\n  async registerSubmit() {\n    await this.register();\n\n    this.disablePasswords();\n\n    setTimeout(() => {\n      this.submitting = true;\n      this.el.requestSubmit();\n    }, 0);\n  }\n\n  disablePasswords() {\n    if (this.passwordInput.value) {\n      this.passwordInput.disabled = true;\n\n      setTimeout(() => {\n        this.passwordInput.disabled = false;\n      }, 1000);\n    }\n\n    const inputs = this.el.querySelectorAll<HTMLInputElement>('[data-srp-override]');\n\n    for (const input of inputs) {\n      if (input.value) {\n        input.disabled = true;\n\n        setTimeout(() => {\n          input.disabled = false;\n        }, 1000);\n      }\n    }\n  }\n\n  createClient(): InstanceType<typeof SRPClient> {\n    const client = SRPClient.create(\n      this.options.prime,\n      this.options.generator,\n      this.options.key,\n    );\n\n    client.setSize(this.options.size);\n    client.setHasher(async (buffer) => {\n      return new Uint8Array(\n        // SHA256\n        await crypto.subtle.digest(\"SHA-256\", buffer)\n      );\n    });\n\n    return client;\n  }\n\n  async register() {\n    const client = this.createClient();\n\n    const identity = this.identityInput.value;\n    const password = this.passwordInput.value;\n\n    let { salt, verifier } = await client.register(identity, password);\n\n    const srpInput = this.saltInput ??= this.createHiddenInput('srp[salt]');\n    srpInput.value = salt.toString(16);\n\n    const verifierInput = this.verifierInput ??= this.createHiddenInput('srp[verifier]');\n    verifierInput.value = verifier.toString(16);\n  }\n\n  createHiddenInput(name: string) {\n    const input = document.createElement('input');\n\n    input.type = 'hidden';\n    input.name = name;\n\n    this.el.appendChild(input);\n\n    return input;\n  }\n}\n\nfunction hexToBigint(hex: string) {\n  return BigInt(`0x${hex}`);\n}\n\nu.directive('srp-registration', {\n  mounted(el, { value }) {\n    const options = JSON.parse(value);\n    u.module(\n      el,\n      'srp.registration',\n      (el) => new SRPRegistration(el as HTMLFormElement, options)\n    );\n  }\n});\n"]}